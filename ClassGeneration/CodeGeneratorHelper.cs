using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using System.Collections.Generic;
using Microsoft.CodeAnalysis.Formatting;

namespace ClassGeneration
{
    public static class CodeGeneratorHelper
    {
        public static string GenerateTestCode(List<NamespaceData> namespaces, string fileName)
        {
            CompilationUnitSyntax tree = SyntaxFactory.CompilationUnit()
            .AddUsings(
                SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("NUnit.Framework")),
                SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(fileName.Replace(".cs", ""))));

            foreach (NamespaceData namespaceData in namespaces)
            {
                NamespaceDeclarationSyntax ns = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.IdentifierName(namespaceData.Name + ".Tests"));
                foreach (ClassData classData in namespaceData.ClassList)
                {
                    ClassDeclarationSyntax classNode = SyntaxFactory
                        .ClassDeclaration(classData.Name + "TestClass")
                        .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                        .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestFixture")))).NormalizeWhitespace());
                    foreach (MethodData methodData in classData.MethodList)
                    {
                        MethodDeclarationSyntax method = SyntaxFactory
                            .MethodDeclaration(SyntaxFactory.ParseTypeName("void"), methodData.Name + "TestMethod")
                            .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("Test")))).NormalizeWhitespace())
                            .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                            .AddModifiers(SyntaxFactory.Token(SyntaxKind.StaticKeyword))
                            .AddBodyStatements(
                                SyntaxFactory.ExpressionStatement(
                                    SyntaxFactory.InvocationExpression(
                                        SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, SyntaxFactory.IdentifierName("Assert"), SyntaxFactory.IdentifierName("Fail")),
                                            SyntaxFactory.ArgumentList(SyntaxFactory.SingletonSeparatedList(SyntaxFactory.Argument(SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression, SyntaxFactory.Literal("autogenerated"))))))));
                        classNode = classNode
                            .AddMembers(method);
                    }
                    ns = ns
                        .AddMembers(classNode);
                }
                tree = tree
                    .AddMembers(ns);
            }

            AdhocWorkspace cw = new AdhocWorkspace();

            return Formatter.Format(tree.SyntaxTree.GetRoot(), cw, null).ToFullString();

        }
    }
}
